// import React, { useState, Fragment } from "react";
// import { Handle, Position } from "reactflow";
// function ERNodes(node) {
//   console.log("PRops", node);
//   const [items, setItems] = useState([
//     // { id: 1, label: "textures", type: "string" },
//     // { id: 2, label: "fractalSpeed", type: "number" },
//     // { id: 3, label: "vector3", type: "string" },
//     // { id: 4, label: "Color", type: "string" },
//     // { id: 5, label: "Resolution", type: "number" },
//     // { id: 6, label: "vector4", type: "vector" },
//   ]);
//   const [title, setTitle] = useState("Name");
//   const [isEditingTitle, setIsEditingTitle] = useState(false);
//   const [showInput, setShowInput] = useState(false);
//   const [inputValue, setInputValue] = useState("");
//   const [inputType, setInputType] = useState("");
//   const [hideButton, setHideButton] = useState(false);
//   const handleAddClick = () => {
//     setShowInput(true);
//     setHideButton(true);
//   };
//   const handleInputChange = (e) => {
//     setInputValue(e.target.value);
//   };
//   const handleTypeChange = (e) => {
//     setInputType(e.target.value);
//   };
//   // const handleAddItem = () => {
//   //   if (inputValue.trim() && inputType.trim()) {
//   //     setItems([
//   //       ...items,
//   //       { id: items.length + 1, label: inputValue, type: inputType },
//   //     ]);
//   //     setInputValue("");
//   //     setInputType("");
//   //     setShowInput(false);
//   //     setHideButton(false);
//   //   }
//   // };

//   const handleAddItem = () => {
//     if (inputValue.trim() && inputType.trim()) {
//       const newId = items.length + 1;
//       setItems([
//         ...items,
//         {
//           id: newId,
//           label: inputValue,
//           type: inputType,
//           sourceHandles: `${newId}-source-${inputValue}`,
//           targetHandles: `${newId}-target-${inputValue}`,
//         },
//       ]);

//       // Extract sourceHandles and targetHandles from items
//       const sourceHandles = items.map((item) => ({ id: item.sourceHandles }));
//       const targetHandles = items.map((item) => ({ id: item.targetHandles }));

//       // Add sourceHandles and targetHandles to node data
//       node.data.sourceHandles = sourceHandles;
//       node.data.targetHandles = targetHandles;
//       console.log(JSON.stringify(node, null, 2));
//       setInputValue("");
//       setInputType("");
//       setShowInput(false);
//       setHideButton(false);
//     }
//   };
//   const handleRemoveItem = (id) => {
//     setItems(items.filter((item) => item.id !== id));
//   };
//   const handleTitleChange = (e) => {
//     setTitle(e.target.value);
//   };
//   const handleTitleClick = () => {
//     setIsEditingTitle(true);
//   };
//   const handleTitleBlur = () => {
//     setIsEditingTitle(false);
//   };

//   // const node = {
//   //   id: "dndnode_0",
//   //   data: {
//   //     label: "ernode node",
//   //   },
//   //   type: "ernode",
//   //   xPos: 246.75,
//   //   yPos: -144.25,
//   //   selected: true,
//   //   isConnectable: true,
//   //   sourcePosition: "bottom",
//   //   targetPosition: "top",
//   //   dragging: false,
//   //   zIndex: 1000,
//   // };

//   // const itemss = [
//   //   {
//   //     id: "userId",
//   //     label: "userID",
//   //     sourceHandles: "userID-source",
//   //     targetHandles: "userID-target",
//   //   },
//   //   {
//   //     id: "empID",
//   //     label: "empID",
//   //     sourceHandles: "empID-source",
//   //     targetHandles: "empID-target",
//   //   },
//   // ];

//   // // Extract sourceHandles and targetHandles from items
//   // const sourceHandles = itemss.map((item) => ({ id: item.sourceHandles }));
//   // const targetHandles = itemss.map((item) => ({ id: item.targetHandles }));

//   // // Add sourceHandles and targetHandles to node data
//   // node.data.sourceHandles = sourceHandles;
//   // node.data.targetHandles = targetHandles;

//   console.log("items", items);
//   return (
//     <Fragment>
//       <div className="">
//         <div className="bg-erbg inline-block rounded-lg p-0.5">
//           <div className="w-32 rounded-lg bg-ergradientbg pb-2">
//             <div className="flex justify-between bg-erlabelbg rounded-t-lg px-3 py-1 border-b border-outerborderBlue">
//               <div className="text-xs text-white">
//                 {isEditingTitle ? (
//                   <input
//                     type="text"
//                     value={title}
//                     onChange={handleTitleChange}
//                     onBlur={handleTitleBlur}
//                     className="w-full  text-black p-1 rounded "
//                     autoFocus
//                   />
//                 ) : (
//                   <span onClick={handleTitleClick} className="cursor-pointer">
//                     {title}
//                   </span>
//                 )}
//               </div>
//             </div>
//             <div className="py-1">
//               {items.map((item) => (
//                 <div
//                   key={item.id}
//                   className="text-white px-2 text-xs flex justify-between"
//                 >
//                   <Handle
//                     type="source"
//                     style={{ background: "#555" }}
//                     id={item.label}
//                     position={Position.Right}
//                   />

//                   <div className="flex text-7">
//                     <svg
//                       aria-hidden="true"
//                       focusable="false"
//                       data-prefix="fas"
//                       data-icon="right-long"
//                       className="w-2.5 h-2.5 shadow-arrowsh bg-arrowbg text-arrowcolor px-0.5 py-0.5 text-7 rounded mr-1 mt-1"
//                       role="img"
//                       xmlns="http://www.w3.org/2000/svg"
//                       viewBox="0 0 512 512"
//                     >
//                       <path
//                         fill="currentColor"
//                         d="M334.5 414c8.8 3.8 19 2 26-4.6l144-136c4.8-4.5 7.5-10.8 7.5-17.4s-2.7-12.9-7.5-17.4l-144-136c-7-6.6-17.2-8.4-26-4.6s-14.5 12.5-14.5 22l0 72L32 192c-17.7 0-32 14.3-32 32l0 64c0 17.7 14.3 32 32 32l288 0 0 72c0 9.6 5.7 18.2 14.5 22z"
//                       ></path>
//                     </svg>
//                     {item.label}
//                     <span className="ml-1 text-tetnum text-5">
//                       ({item.type})
//                     </span>
//                   </div>
//                   <div className="justify">
//                     <img
//                       src="/images/cross_active.svg"
//                       alt=""
//                       className="h-2.5 mt-1 cursor-pointer"
//                       onClick={() => handleRemoveItem(item.id)}
//                     />
//                   </div>
//                   <Handle
//                     type="target"
//                     style={{ background: "#555" }}
//                     id={item.label}
//                     position={Position.Left}
//                   />
//                 </div>
//               ))}
//             </div>
//             {showInput && (
//               <div className="block py-1 px-2">
//                 <input
//                   type="text"
//                   placeholder="Name"
//                   className="w-full text-8 text-black p-1 rounded mb-1"
//                   value={inputValue}
//                   onChange={handleInputChange}
//                 />
//                 <br />
//                 <input
//                   type="text"
//                   placeholder="Type"
//                   className="w-full text-8 text-black p-1 rounded mb-1"
//                   value={inputType}
//                   onChange={handleTypeChange}
//                 />
//                 <button
//                   onClick={handleAddItem}
//                   className="w-28 text-10  text-white bg-blue-500 px-1 py-0.5 rounded"
//                 >
//                   Add
//                 </button>
//               </div>
//             )}
//             {!hideButton && (
//               <button
//                 onClick={handleAddClick}
//                 className="w-28 text-10 text-white bg-green-500 px-1 py-0.5 rounded mt-2 mx-2"
//               >
//                 Add Item
//               </button>
//             )}
//           </div>
//         </div>
//       </div>
//     </Fragment>
//   );
// }
// export default ERNodes;

import React, { useState, Fragment } from "react";
import { Handle, Position, useReactFlow } from "reactflow";

function ERNodes(node) {
  const { setNodes } = useReactFlow(); // Get setNodes function from ReactFlow context

  const [items, setItems] = useState([]);
  const [title, setTitle] = useState("Name");
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [showInput, setShowInput] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [inputType, setInputType] = useState("");
  const [hideButton, setHideButton] = useState(false);

  const handleAddClick = () => {
    setShowInput(true);
    setHideButton(true);
  };

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleTypeChange = (e) => {
    setInputType(e.target.value);
  };

  const handleAddItem = () => {
    if (inputValue.trim() && inputType.trim()) {
      const newId = items.length + 1;
      const newItem = {
        id: newId,
        label: inputValue,
        type: inputType,
        sourceHandles: `${newId}-source-${inputValue}`,
        targetHandles: `${newId}-target-${inputValue}`,
      };
      const newItems = [...items, newItem];
      setItems(newItems);

      // Extract sourceHandles and targetHandles from items
      const sourceHandles = newItems.map((item) => ({
        id: item.sourceHandles,
      }));
      const targetHandles = newItems.map((item) => ({
        id: item.targetHandles,
      }));

      // Update the node data
      setNodes((nds) =>
        nds.map((n) =>
          n.id === node.id
            ? {
                ...n,
                data: {
                  ...n.data,
                  sourceHandles,
                  targetHandles,
                },
              }
            : n
        )
      );

      setInputValue("");
      setInputType("");
      setShowInput(false);
      setHideButton(false);
    }
  };

  const handleRemoveItem = (id) => {
    const newItems = items.filter((item) => item.id !== id);
    setItems(newItems);

    const sourceHandles = newItems.map((item) => ({ id: item.sourceHandles }));
    const targetHandles = newItems.map((item) => ({ id: item.targetHandles }));

    // Update the node data
    setNodes((nds) =>
      nds.map((n) =>
        n.id === node.id
          ? {
              ...n,
              data: {
                ...n.data,
                sourceHandles,
                targetHandles,
              },
            }
          : n
      )
    );
  };

  const handleTitleChange = (e) => {
    setTitle(e.target.value);
  };

  const handleTitleClick = () => {
    setIsEditingTitle(true);
  };

  const handleTitleBlur = () => {
    setIsEditingTitle(false);
  };

  console.log("Target Handles", node?.data?.targetHandles);
  console.log("Source Handles", node?.data?.sourceHandles);

  return (
    <Fragment>
      <div className="">
        <div className="bg-erbg inline-block rounded-lg p-0.5">
          <div className="w-32 rounded-lg bg-ergradientbg pb-2">
            <div className="flex justify-between bg-erlabelbg rounded-t-lg px-3 py-1 border-b border-outerborderBlue">
              <div className="text-xs text-white">
                {isEditingTitle ? (
                  <input
                    type="text"
                    value={title}
                    onChange={handleTitleChange}
                    onBlur={handleTitleBlur}
                    className="w-full  text-black p-1 rounded "
                    autoFocus
                  />
                ) : (
                  <span onClick={handleTitleClick} className="cursor-pointer">
                    {title}
                  </span>
                )}
              </div>
            </div>
            <div className="handles targets">
              {node?.data?.targetHandles?.map((handle) => {
                return (
                  <Handle
                    key={handle.id}
                    id={handle.id}
                    type="target"
                    style={{ background: "#555" }}
                    position={Position.Left}
                  />
                );
              })}
            </div>
            <div className="py-1">
              {items.map((item) => (
                <div
                  key={item.id}
                  className="text-white px-2 text-xs flex justify-between"
                >
                  {/* <Handle
                    type="source"
                   
                    id={item.label}
                    position={Position.Right}
                  /> */}

                  <div className="flex text-7">
                    <svg
                      aria-hidden="true"
                      focusable="false"
                      data-prefix="fas"
                      data-icon="right-long"
                      className="w-2.5 h-2.5 shadow-arrowsh bg-arrowbg text-arrowcolor px-0.5 py-0.5 text-7 rounded mr-1 mt-1"
                      role="img"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 512 512"
                    >
                      <path
                        fill="currentColor"
                        d="M334.5 414c8.8 3.8 19 2 26-4.6l144-136c4.8-4.5 7.5-10.8 7.5-17.4s-2.7-12.9-7.5-17.4l-144-136c-7-6.6-17.2-8.4-26-4.6s-14.5 12.5-14.5 22l0 72L32 192c-17.7 0-32 14.3-32 32l0 64c0 17.7 14.3 32 32 32l288 0 0 72c0 9.6 5.7 18.2 14.5 22z"
                      ></path>
                    </svg>
                    {item.label}
                    <span className="ml-1 text-tetnum text-5">
                      ({item.type})
                    </span>
                  </div>
                  <div className="justify">
                    <img
                      src="/images/cross_active.svg"
                      alt=""
                      className="h-2.5 mt-1 cursor-pointer"
                      onClick={() => handleRemoveItem(item.id)}
                    />
                  </div>
                  {/* <Handle
                    type="target"
                    style={{ background: "#555" }}
                    id={item.label}
                    position={Position.Left}
                  /> */}
                </div>
              ))}
            </div>

            <div className="handles sources">
              {node?.data?.sourceHandles?.map((handle) => (
                <Handle
                  key={handle.id}
                  id={handle.id}
                  type="source"
                  position={Position.Right}
                  style={{ background: "#555" }}
                />
              ))}
            </div>
            {showInput && (
              <div className="block py-1 px-2">
                <input
                  type="text"
                  placeholder="Name"
                  className="w-full text-8 text-black p-1 rounded mb-1"
                  value={inputValue}
                  onChange={handleInputChange}
                />
                <br />
                <input
                  type="text"
                  placeholder="Type"
                  className="w-full text-8 text-black p-1 rounded mb-1"
                  value={inputType}
                  onChange={handleTypeChange}
                />
                <button
                  onClick={handleAddItem}
                  className="w-28 text-10  text-white bg-blue-500 px-1 py-0.5 rounded"
                >
                  Add
                </button>
              </div>
            )}
            {!hideButton && (
              <button
                onClick={handleAddClick}
                className="w-28 text-10 text-white bg-green-500 px-1 py-0.5 rounded mt-2 mx-2"
              >
                Add Item
              </button>
            )}
          </div>
        </div>
      </div>
    </Fragment>
  );
}

export default ERNodes;
